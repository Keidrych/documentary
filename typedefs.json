{
  "http.IncomingMessage": {
    "link": "https://nodejs.org/api/http.html#http_class_http_incomingmessage",
    "description": "A readable stream that receives data from the client in chunks. The first argument of the http.Server.on(\"request\") event."
  },
  "http.Server": {
    "link": "https://nodejs.org/api/http.html#http_class_http_server",
    "description": "An HTTP server that extends net.Server to handle network requests."
  },
  "http.ServerResponse": {
    "link": "https://nodejs.org/api/http.html#http_class_http_serverresponse",
    "description": "A writable stream that communicates data to the client. The second argument of the http.Server.on(\"request\") event."
  },
  "http.OutgoingHttpHeaders": {
    "link": "https://nodejs.org/api/http.html",
    "description": "The headers hash map for making requests, including such properties as Content-Encoding, Content-Type, etc."
  },
  "http.IncomingHttpHeaders": {
    "link": "https://nodejs.org/api/http.html",
    "description": "The hash map of headers that are set by the server (e.g., when accessed via IncomingMessage.headers)"
  },
  "url.URL": {
    "link": "https://nodejs.org/api/url.html#url_class_url",
    "description": "Browser-compatible URL class, implemented by following the `WHATWG` URL Standard."
  },
  "net.Socket": {
    "link": "https://nodejs.org/api/net.html#net_class_net_socket",
    "description": "A two-way communication channel between clients and servers."
  },
  "stream.Stream": {
    "link": "https://nodejs.org/api/stream.html#stream",
    "description": "Handles streaming data in Node.JS."
  },
  "events.EventEmitter": {
    "link": "https://nodejs.org/api/events.html#events_class_eventemitter",
    "description": "Emits named events that cause listeners to be called."
  },
  "child_process.ForkOptions": {
    "link": "https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options",
    "description": "Options to fork a child process with. Allows to set cwd, environment variables, etc."
  },
  "stream.Writable": {
    "link": "https://nodejs.org/api/stream.html#stream_class_stream_writable",
    "description": "A stream that can be written data to."
  },
  "stream.Readable": {
    "link": "https://nodejs.org/api/stream.html#stream_class_stream_readable",
    "description": "A stream that emits data (an external source of data that pushes new chunks as they are ready)."
  },
  "stream.Transform": {
    "link": "https://nodejs.org/api/stream.html#stream_class_stream_transform",
    "description": "A duplex stream that receives data as Writable, transforms this data, and pushes it as Readable via the `transform` method implementation."
  },
  "stream.Duplex": {
    "link": "https://nodejs.org/api/stream.html#stream_class_stream_duplex",
    "description": "A stream that implements both Readable and Writable interfaces."
  }
}