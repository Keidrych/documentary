{"version":3,"sources":["../src/index.js"],"names":["documentary","console","log"],"mappings":";;;;;;;;;;;;;AAgBA;;;;AAhBA;;;AAGe,eAAeA,WAAf,GAA6B;AAC1CC,UAAQC,GAAR,CAAY,oBAAZ;AACD;AAED;;;;AAIA;AACA;AACA;AACA;;AAKA;;;;;;;;;;;AAYA","sourcesContent":["/**\n * This is the main package file.\n */\nexport default async function documentary() {\n  console.log('documentary called')\n}\n\n/**\n * A nested structure representing levels of headers in the MarkDown file.\n * @param {Readable} structure\n */\n// export const toc = (readable) => {\n//   // const t = new Tran\n//   // return Object.keys(structure)\n// }\n\nexport { default as Toc } from './lib/Toc'\n\n\n/**\n * @typedef {Object} Test This is test description.\n * @typedef {Object} SessionConfig Description of Session Config.\n * @prop {string} key cookie key.\n * @prop {number|'session'} [maxAge=86400000] maxAge in ms. Default is 1 day. `session` will result in a cookie that expires when session/browser is closed. Warning: If a session cookie is stolen, this cookie will never expire. Default `86400000`.\n * @prop {boolean} [overwrite] Can overwrite or not. Default `true`.\n * @prop {boolean} [httpOnly] httpOnly or not or not. Default `true`.\n * @prop {boolean} [signed=false] Signed or not. Default `true`.\n * @prop {boolean} [rolling] Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. Default `false`.\n * @prop {boolean} [renew] Renew session when session is nearly expired, so we can always keep user logged in. Default `false`.\n */\n\n// console.log('test')\n"],"file":"index.js"}