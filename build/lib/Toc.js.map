{"version":3,"sources":["../../src/lib/Toc.js"],"names":["re","Toc","Transform","constructor","config","skipLevelOne","_transform","buffer","enc","next","res","rre","RegExp","source","methodTitleRe","exec","t","level","link","length","title","l","b","slice","filter","a","join","trim","json","args","JSON","parse","s","map","name","type","fullTitle","replace","err","heading","p","repeat","push","lastIndex","getToc","stream","rs","pipe","promise","Catchment"],"mappings":"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","sourcesContent":["import { Transform } from 'stream'\nimport Catchment from 'catchment'\nimport { getLink } from '.'\nimport { methodTitleRe, replaceTitle } from './rules/method-title'\n\nconst re = /(?:^|\\n) *(#+) *((?:(?!\\n)[\\s\\S])+)\\n/\n\nexport default class Toc extends Transform {\n  /**\n   * A transform stream which will extract the titles in the markdown document and transform them into a markdown nested list with links.\n   * @param {Config} [config] Configuration object.\n   * @param {boolean} [config.skipLevelOne=true] Don't use the first title in the TOC (default `true`).\n   */\n  constructor(config = {}) {\n    const {\n      skipLevelOne = true,\n    } = config\n    super()\n    this.skipLevelOne = skipLevelOne\n  }\n  _transform(buffer, enc, next) {\n    let res\n    const rre = new RegExp(`(?:${re.source})|(?:${methodTitleRe.source})`, 'g')\n    while ((res = rre.exec(buffer)) !== null) {\n      let t\n      let level\n      let link\n      if (res[1]) { // normal title regex\n        const [, { length }, title] = res\n        level = length\n        if (this.skipLevelOne && level == 1) continue\n        t = title\n        link = getLink(title)\n      } else { // the method title regex\n        try {\n          const l = res[3]\n          level = l.length\n          const b = res.slice(4, 6).filter(a => a).join(' ').trim()\n          const json = res[7] || '[]'\n          const args = JSON.parse(json)\n          const s = args.map(([name, type]) => {\n            if (typeof type == 'string') return `${name}: ${type}`\n            return `${name}: object`\n          })\n          const fullTitle = replaceTitle(...res.slice(3)).replace(/^#+ +/, '')\n          link = getLink(fullTitle)\n          t = `\\`${b}(${s.join(', ')})${res[6] ? `: ${res[6]}` : ''}\\``\n        } catch (err) {\n          // ok\n          continue\n        }\n      }\n      const heading = `[${t}](#${link})`\n      let s\n      if (level == 2) {\n        s = `- ${heading}`\n      } else {\n        const p = '  '.repeat(level - 2)\n        s = `${p}* ${heading}`\n      }\n      this.push(s)\n      this.push('\\n')\n    }\n    re.lastIndex = -1\n    next()\n  }\n}\n\nexport const getToc = async (stream) => {\n  const rs = new Toc()\n  stream.pipe(rs)\n  const { promise } = new Catchment({ rs })\n  const t = await promise\n  return t.trim()\n}\n\n/**\n * @typedef {Object} Config\n * @property {boolean} [skipLevelOne=true] Don't use the first title in the TOC (default `true`).\n */\n"],"file":"Toc.js"}