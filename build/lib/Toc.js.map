{"version":3,"sources":["../../src/lib/Toc.js"],"names":["re","Toc","Transform","constructor","config","skipLevelOne","_transform","buffer","enc","next","res","exec","length","level","title","link","t","s","p","repeat","push","getToc","path","md","rs","pipe","promise","Catchment","trim"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,KAAK,kCAAX;;AAEe,MAAMC,GAAN,SAAkBC,iBAAlB,CAA4B;AACzC;;;;;AAKAC,cAAYC,SAAS,EAArB,EAAyB;AACvB,UAAM;AACJC,qBAAe;AADX,QAEFD,MAFJ;AAGA;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACD;;AACDC,aAAWC,MAAX,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC5B,QAAIC,GAAJ;;AACA,WAAO,CAACA,MAAMV,GAAGW,IAAH,CAAQJ,MAAR,CAAP,MAA4B,IAAnC,EAAyC;AACvC,YAAM,GAAG;AAAEK,gBAAQC;AAAV,OAAH,EAAsBC,KAAtB,IAA+BJ,GAArC;AACA,UAAI,KAAKL,YAAL,IAAqBQ,SAAS,CAAlC,EAAqC;AACrC,YAAME,OAAO,eAAQD,KAAR,CAAb;AACA,YAAME,IAAK,IAAGF,KAAM,MAAKC,IAAK,GAA9B;AACA,UAAIE,CAAJ;;AACA,UAAIJ,SAAS,CAAb,EAAgB;AACdI,YAAK,KAAID,CAAE,EAAX;AACD,OAFD,MAEO;AACL,cAAME,IAAI,KAAKC,MAAL,CAAYN,QAAQ,CAApB,CAAV;AACAI,YAAK,GAAEC,CAAE,KAAIF,CAAE,EAAf;AACD;;AACD,WAAKI,IAAL,CAAUH,CAAV;AACA,WAAKG,IAAL,CAAU,IAAV;AACD;;AACDX;AACD;;AA/BwC;;;;AAkCpC,MAAMY,SAAS,MAAOC,IAAP,IAAgB;AACpC,QAAMC,KAAK,0BAAiBD,IAAjB,CAAX;AACA,QAAME,KAAK,IAAIvB,GAAJ,EAAX;AACAsB,KAAGE,IAAH,CAAQD,EAAR;AACA,QAAM;AAAEE;AAAF,MAAc,IAAIC,kBAAJ,CAAc;AAAEH;AAAF,GAAd,CAApB;AACA,QAAMR,IAAI,MAAMU,OAAhB;AACA,SAAOV,EAAEY,IAAF,EAAP;AACD,CAPM;AASP","sourcesContent":["import { Transform } from 'stream'\nimport Catchment from 'catchment'\nimport { createReadStream } from 'fs'\nimport { getLink } from '.'\n\nconst re = /^ *(#+) *((?:(?!\\n)[\\s\\S])+)\\n/gm\n\nexport default class Toc extends Transform {\n  /**\n   * A transform stream which will extract the titles in the markdown document and transform them into a markdown nested list with links.\n   * @param {Config} [config] Configuration object.\n   * @param {boolean} [config.skipLevelOne=true] Don't use the first title in the TOC (default `true`).\n   */\n  constructor(config = {}) {\n    const {\n      skipLevelOne = true,\n    } = config\n    super()\n    this.skipLevelOne = skipLevelOne\n  }\n  _transform(buffer, enc, next) {\n    let res\n    while ((res = re.exec(buffer)) !== null) {\n      const [, { length: level }, title] = res\n      if (this.skipLevelOne && level == 1) continue\n      const link = getLink(title)\n      const t = `[${title}](#${link})`\n      let s\n      if (level == 2) {\n        s = `- ${t}`\n      } else {\n        const p = '  '.repeat(level - 2)\n        s = `${p}* ${t}`\n      }\n      this.push(s)\n      this.push('\\n')\n    }\n    next()\n  }\n}\n\nexport const getToc = async (path) => {\n  const md = createReadStream(path)\n  const rs = new Toc()\n  md.pipe(rs)\n  const { promise } = new Catchment({ rs })\n  const t = await promise\n  return t.trim()\n}\n\n/**\n * @typedef {Object} Config\n * @property {boolean} [skipLevelOne=true] Don't use the first title in the TOC (default `true`).\n */\n"],"file":"Toc.js"}