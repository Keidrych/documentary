{"version":3,"sources":["../../src/lib/Typedefs.js"],"names":[],"mappings":"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","file":"lib/Typedefs.js","sourcesContent":["import { debuglog } from 'util'\nimport { Replaceable } from 'restream'\nimport extractTags from 'rexml'\nimport { collect } from 'catchment'\nimport { typedefMdRe } from './rules/typedef-md'\nimport { read } from '.'\nimport Type from './typedef/Type'\nimport { codeRe, commentRule } from './rules'\n\nconst LOG = debuglog('doc')\n\n/**\n * A Typedefs class will detect and store in a map all type definitions embedded into the documentation.\n */\nexport default class Typedefs extends Replaceable {\n  constructor() {\n    super([\n      {\n        re: codeRe,\n        replacement() {\n          return ''\n        },\n      },\n      commentRule,\n      {\n        re: typedefMdRe,\n        async replacement(match, location, typeName) {\n          if (location in this.locations) return\n          try {\n            const xml = await read(location)\n            const root = extractTags('types', xml)\n            if (!root.length) throw new Error('XML file should contain root types element.')\n\n            const [{ content: Root }] = root\n            const types = extractTags('type', Root)\n            const typedefs = types\n              .map(({ content, props }) => {\n                const type = new Type()\n                type.fromXML(content, props)\n                return type\n              })\n\n            const imports = extractTags('import', Root)\n              .map(({ props: { name, from, desc } }) => {\n                const type = new Type()\n                type.fromXML('', {\n                  name,\n                  type: `import('${from}').${name}`,\n                  noToc: true,\n                  import: true,\n                  desc,\n                })\n                return type\n              })\n            this.emit('types', {\n              location,\n              types: [...imports, ...typedefs],\n              typeName,\n            })\n          } catch (e) {\n            LOG('(%s) Could not process typedef-md: %s', location, e.message)\n          }\n        },\n      },\n    ])\n    this.types = []\n    this.locations = {}\n    this.on('types', ({ location, types, typeName }) => {\n      const t = typeName ? types.filter(tt => tt.name == typeName) : types\n      this.types.push(...t)\n      const oldLocationTypes = this.locations[location] || []\n      this.locations = {\n        ...this.locations,\n        [location]: [...oldLocationTypes, ...t],\n      }\n    })\n  }\n}\n\nexport const getTypedefs = async (stream) => {\n  const typedefs = new Typedefs()\n  stream.pipe(typedefs)\n  await collect(typedefs)\n  const { types, locations } = typedefs\n  return { types, locations }\n}"]}