{"version":3,"sources":["../../../src/lib/typedef/jsdoc.js"],"names":["jsDocRe","LOG","JSDocRule","re","replacement","match","typeName","paramName","types","t","s","toParam"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,UAAU,uFAAhB;;AAEA,MAAMC,MAAM,oBAAS,KAAT,CAAZ;AAEA,MAAMC,YAAY;AAChBC,MAAIH,OADY;;AAEhBI,cAAYC,KAAZ,EAAmBC,QAAnB,EAA6BC,SAA7B,EAAwC;AACtC,QAAI,EAAED,YAAY,KAAKE,KAAnB,CAAJ,EAA+B;AAC7BP,UAAI,mBAAJ,EAAyBK,QAAzB;AACA,aAAOD,KAAP;AACD;AACD;;;AACA,UAAMI,IAAI,KAAKD,KAAL,CAAWF,QAAX,CAAV;AACA,UAAMI,IAAID,EAAEE,OAAF,CAAUJ,SAAV,CAAV;AACA,WAAOG,CAAP;AACD;;AAXe,CAAlB;eAeeR,S","sourcesContent":["import { debuglog } from 'util'\n\nconst jsDocRe = / \\* @param {(.+?)} \\[?([^\\s\\]]+)\\]?(?: .+)?((?:\\n \\* @param {(?:.+?)} \\[?\\2\\]?.*)*)/gm\n\nconst LOG = debuglog('doc')\n\nconst JSDocRule = {\n  re: jsDocRe,\n  replacement(match, typeName, paramName) {\n    if (!(typeName in this.types)) {\n      LOG('Type %s not found', typeName)\n      return match\n    }\n    /** @type {Type} */\n    const t = this.types[typeName]\n    const s = t.toParam(paramName)\n    return s\n  },\n}\n\nexport { jsDocRe }\nexport default JSDocRule"],"file":"jsdoc.js"}