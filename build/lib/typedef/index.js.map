{"version":3,"sources":["../../../src/lib/typedef/index.js"],"names":["getNameWithDefault","name","defaultValue","type","hasDefault","undefined","d","includes","n"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;AAYO,MAAMA,qBAAqB,CAACC,IAAD,EAAOC,YAAP,EAAqBC,IAArB,KAA8B;AAC9D,QAAMC,aAAaF,iBAAiBG,SAApC;AACA,MAAI,CAACD,UAAL,EAAiB,OAAOH,IAAP;AACjB,QAAMK,IAAI,CAAC,QAAD,EAAW,SAAX,EAAsBC,QAAtB,CAA+BJ,IAA/B,IAAuCD,YAAvC,GAAuD,IAAGA,YAAa,GAAjF;AACA,QAAMM,IAAK,GAAEP,IAAK,IAAGK,CAAE,EAAvB;AACA,SAAOE,CAAP;AACD,CANM","sourcesContent":["/**\n * Return a name of a property with its default value, and surrounded by square brackets if default is given. If type is boolean or number, the default value is not surrounded by \"\".\n * @param {string} name Name of the property.\n * @param {*} defaultValue Default of the property.\n * @param {string} type Type of the property.\n * @example\n *\n * requiredParam\n * [optionalDefaultParam=false]\n * [optionalDefaultParamString='test']\n * [optionalParam]\n */\nexport const getNameWithDefault = (name, defaultValue, type) => {\n  const hasDefault = defaultValue !== undefined\n  if (!hasDefault) return name\n  const d = ['number', 'boolean'].includes(type) ? defaultValue : `\"${defaultValue}\"`\n  const n = `${name}=${d}`\n  return n\n}"],"file":"index.js"}