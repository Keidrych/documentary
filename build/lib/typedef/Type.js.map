{"version":3,"sources":["../../../src/lib/typedef/Type.js"],"names":["Type","fromXML","content","name","type","desc","Error","description","ps","props","map","c","p","pr","Property","properties","toTypedef","t","d","s","sp","toProp","st","join","toParam","paramName"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,IAAN,CAAW;AACTC,UAAQC,OAAR,EAAiB;AAAEC,QAAF;AAAQC,QAAR;AAAcC;AAAd,GAAjB,EAAuC;AACrC,QAAI,CAACF,IAAL,EAAW,MAAM,IAAIG,KAAJ,CAAU,4BAAV,CAAN;AACX,SAAKH,IAAL,GAAYA,IAAZ;AAEA,QAAIC,IAAJ,EAAU,KAAKA,IAAL,GAAYA,IAAZ;AACV,QAAIC,IAAJ,EAAU,KAAKE,WAAL,GAAmBF,IAAnB;;AAEV,QAAIH,OAAJ,EAAa;AACX,YAAMM,KAAK,oBAAY,GAAZ,EAAiBN,OAAjB,CAAX;AACA,YAAMO,QAAQD,GAAGE,GAAH,CAAO,CAAC;AAAER,iBAASS,CAAX;AAAcF,eAAOG;AAArB,OAAD,KAA8B;AACjD,cAAMC,KAAK,IAAIC,iBAAJ,EAAX;AACAD,WAAGZ,OAAH,CAAWU,CAAX,EAAcC,CAAd;AACA,eAAOC,EAAP;AACD,OAJa,CAAd;AAKA,WAAKE,UAAL,GAAkBN,KAAlB;AACD;AACF;;AACDO,cAAY;AACV,UAAMC,IAAI,KAAKb,IAAL,IAAa,QAAvB,CADU,CAEV;;AACA,UAAMc,IAAI,KAAKX,WAAL,GAAoB,IAAG,KAAKA,WAAY,EAAxC,GAA4C,EAAtD;AACA,UAAMY,IAAK,gBAAeF,CAAE,KAAI,KAAKd,IAAK,GAAEe,CAAE,EAA9C;AACA,UAAMN,IAAI,KAAKG,UAAL,GAAkB,KAAKA,UAAL,CAAgBL,GAAhB,CAAqBG,EAAD,IAAQ;AACtD,YAAMO,KAAKP,GAAGQ,MAAH,EAAX;AACA,aAAOD,EAAP;AACD,KAH2B,CAAlB,GAGL,EAHL;AAIA,UAAME,KAAK,CAACH,CAAD,EAAI,GAAGP,CAAP,EAAUW,IAAV,CAAe,IAAf,CAAX;AACA,WAAOD,EAAP;AACD;;AACDE,UAAQC,SAAR,EAAmB;AACjB,UAAMP,IAAI,KAAKX,WAAL,GAAoB,IAAG,KAAKA,WAAY,EAAxC,GAA4C,EAAtD;AACA,UAAMY,IAAK,cAAa,KAAKhB,IAAK,KAAIsB,SAAU,GAAEP,CAAE,EAApD;AACA,UAAMN,IAAI,KAAKG,UAAL,GAAkB,KAAKA,UAAL,CAAgBL,GAAhB,CAAqBG,EAAD,IAAQ;AACtD,YAAMO,KAAKP,GAAGW,OAAH,CAAWC,SAAX,CAAX;AACA,aAAOL,EAAP;AACD,KAH2B,CAAlB,GAGL,EAHL;AAIA,UAAME,KAAK,CAACH,CAAD,EAAI,GAAGP,CAAP,EAAUW,IAAV,CAAe,IAAf,CAAX;AACA,WAAOD,EAAP;AACD;;AAvCQ;;eA0CItB,I","sourcesContent":["import extractTags from 'rexml'\nimport Property from './Property'\n\nclass Type {\n  fromXML(content, { name, type, desc }) {\n    if (!name) throw new Error('Type does not have a name.')\n    this.name = name\n\n    if (type) this.type = type\n    if (desc) this.description = desc\n\n    if (content) {\n      const ps = extractTags('p', content)\n      const props = ps.map(({ content: c, props: p }) => {\n        const pr = new Property()\n        pr.fromXML(c, p)\n        return pr\n      })\n      this.properties = props\n    }\n  }\n  toTypedef() {\n    const t = this.type || 'Object'\n    // ${pd ? ` ${pd}` : ''}\n    const d = this.description ? ` ${this.description}` : ''\n    const s = ` * @typedef {${t}} ${this.name}${d}`\n    const p = this.properties ? this.properties.map((pr) => {\n      const sp = pr.toProp()\n      return sp\n    }) : []\n    const st = [s, ...p].join('\\n')\n    return st\n  }\n  toParam(paramName) {\n    const d = this.description ? ` ${this.description}` : ''\n    const s = ` * @param {${this.name}} ${paramName}${d}`\n    const p = this.properties ? this.properties.map((pr) => {\n      const sp = pr.toParam(paramName)\n      return sp\n    }) : []\n    const st = [s, ...p].join('\\n')\n    return st\n  }\n}\n\nexport default Type"],"file":"Type.js"}