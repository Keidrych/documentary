{"version":3,"sources":["../../src/lib/components.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK;AACxB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM;;AAE3C,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;EAClC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU;IAC9C,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACZ,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;MAC9E,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;QAC/C,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS;QACjD,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG;QAC/B,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC;UAC3B,CAAC,CAAC,CAAC,KAAK;UACR,QAAQ,CAAC,CAAC,OAAO;QACnB,CAAC;QACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW;QAC5B,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG;QAC9B,MAAM,CAAC;MACT;MACA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC;MAC/B,MAAM,CAAC;IACT,CAAC;EACH,MAAM,CAAC;AACT;;AAEA,MAAM,CAAC,OAAO,CAAC","file":"lib/components.js","sourcesContent":["import rexml from 'rexml'\nimport render from 'preact-render-to-string'\n\nfunction loadComponents(components) {\n  const compsReplacements = Object.keys(components)\n    .map((key) => {\n      const re = new RegExp(`( *)(<${key}(\\\\s+.*)?(/>|[\\\\s\\\\S]*?<\\\\/${key}>))`, 'gm')\n      const replacement = function (m, pad, Component) {\n        const [{ content, props }] = rexml(key, Component)\n        const instance = components[key]\n        const hyperResult = instance({\n          ...props,\n          children: content,\n        })\n        const r = render(hyperResult)\n        const f = r.replace(/^/gm, pad)\n        return f\n      }\n      const rule = { re, replacement }\n      return rule\n    })\n  return compsReplacements\n}\n\nexport default loadComponents"]}