{"version":3,"sources":["../../src/lib/replace-stream.js"],"names":["LOG","createReplaceStream","toc","tocRule","codeBlocks","marker","Date","now","s","Replaceable","commentRule","re","RegExp","codeRe","replacement","match","exactTable","test","exactMethodTitle","push","m","args","split","p","stdout","promise","join","escape","err","code","console","warn","message","badgeRule","tableRule","titleRule","exampleRule","shift","trim"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;;AAEe,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AAC/C,QAAMC,UAAU,0BAAcD,GAAd,CAAhB;AAEA,QAAME,aAAa,EAAnB;AACA,QAAMC,SAAU,8BAA6BC,KAAKC,GAAL,EAAW,KAAxD;AACA,QAAMC,IAAI,IAAIC,qBAAJ,CAAgB,CACxBC,kBADwB,EAExB;AACEC,QAAI,IAAIC,MAAJ,CAAWC,aAAX,EAAmB,GAAnB,CADN;;AAEEC,gBAAYC,KAAZ,EAAmB;AACjB,UAAIC,gBAAWC,IAAX,CAAgBF,KAAhB,KAA0BG,sBAAiBD,IAAjB,CAAsBF,KAAtB,CAA9B,EAA4D;AAC1D,eAAOA,KAAP;AACD;;AACDX,iBAAWe,IAAX,CAAgBJ,KAAhB;AACA,aAAOV,MAAP;AACD;;AARH,GAFwB,EAYxB;AACEM,QAAI,eADN;;AAEE,UAAMG,WAAN,CAAkBC,KAAlB,EAAyBK,CAAzB,EAA4B;AAC1B,YAAMC,OAAOD,EAAEE,KAAF,CAAQ,GAAR,CAAb;AACA,YAAMC,IAAI,2BAAa,MAAb,EAAqB,CAAC,YAAD,EAAe,GAAGF,IAAlB,CAArB,CAAV;;AACA,UAAI;AACF,cAAM;AAAEG;AAAF,YAAa,MAAMD,EAAEE,OAA3B;;AACA,YAAI,wBAAwBR,IAAxB,CAA6BO,MAA7B,CAAJ,EAA0C;AACxCxB,cAAI,kCAAJ,EAAwCqB,KAAKK,IAAL,CAAU,GAAV,CAAxC;AACA,iBAAOX,KAAP;AACD;;AACD,eAAOY,OAAOH,MAAP,CAAP;AACD,OAPD,CAOE,OAAOI,GAAP,EAAY;AACZ,YAAIA,IAAIC,IAAJ,IAAY,QAAhB,EAA0B;AACxBC,kBAAQC,IAAR,CAAa,uBAAb;AACA,iBAAOhB,KAAP;AACD;;AACDf,YAAI4B,IAAII,OAAR;AACA,eAAOjB,KAAP;AACD;AACF;;AApBH,GAZwB,EAkCxBZ,OAlCwB,EAmCxB8B,gBAnCwB,EAoCxBC,cApCwB,EAqCxBC,oBArCwB,EAsCxBC,gBAtCwB,EAuCxB;AACEzB,QAAI,IAAIC,MAAJ,CAAWP,MAAX,EAAmB,GAAnB,CADN;;AAEES,kBAAc;AACZ,aAAOV,WAAWiC,KAAX,EAAP;AACD;;AAJH,GAvCwB,CAAhB,CAAV;AA+CA,SAAO7B,CAAP;AACD;;AAED,MAAMmB,SAASP,KAAM,YAAWA,EAAEkB,IAAF,EAAS,UAAzC","sourcesContent":["import { Replaceable } from 'restream'\nimport { debuglog } from 'util'\nimport { badgeRule, createTocRule, commentRule, codeRe } from './rules'\nimport { exactTable, exactMethodTitle } from '../lib'\nimport tableRule from './rules/table'\nimport titleRule from './rules/method-title'\nimport exampleRule from './rules/example'\nimport spawncommand from 'spawncommand'\n\nconst LOG = debuglog('doc')\n\nexport default function createReplaceStream(toc) {\n  const tocRule = createTocRule(toc)\n\n  const codeBlocks = []\n  const marker = `%%_DOCUMENTARY_REPLACEMENT_${Date.now()}_%%`\n  const s = new Replaceable([\n    commentRule,\n    {\n      re: new RegExp(codeRe, 'g'),\n      replacement(match) {\n        if (exactTable.test(match) || exactMethodTitle.test(match)) {\n          return match\n        }\n        codeBlocks.push(match)\n        return marker\n      },\n    },\n    {\n      re: /%TREE (.+)%/mg,\n      async replacement(match, m) {\n        const args = m.split(' ')\n        const p = spawncommand('tree', ['--noreport', ...args])\n        try {\n          const { stdout } = await p.promise\n          if (/\\[error opening dir\\]/.test(stdout)) {\n            LOG('Could not generate a tree for %s', args.join(' '))\n            return match\n          }\n          return escape(stdout)\n        } catch (err) {\n          if (err.code == 'ENOENT') {\n            console.warn('tree is not installed')\n            return match\n          }\n          LOG(err.message)\n          return match\n        }\n      },\n    },\n    tocRule,\n    badgeRule,\n    tableRule,\n    titleRule,\n    exampleRule,\n    {\n      re: new RegExp(marker, 'g'),\n      replacement() {\n        return codeBlocks.shift()\n      },\n    },\n  ])\n\n  return s\n}\n\nconst escape = m => `\\`\\`\\`m\\n${m.trim()}\\n\\`\\`\\``\n"],"file":"replace-stream.js"}