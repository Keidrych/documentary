{"version":3,"sources":["../../src/lib/index.js"],"names":["LOG","getLink","title","l","replace","toLowerCase","tableRule","match","table","t","trim","res","JSON","parse","header","rows","a","getRow","map","length","repeat","join","err","row","s","replaceTitle","level","isAsync","method","returnType","sig","endSig","nl","i","single","args","lines","name","type","Object","keys","key","propType","defaultValue","line","n","nls","titleReplacer","methodTitleRe","titleRule","re","replacement"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;;AAEO,MAAMC,UAAWC,KAAD,IAAW;AAChC,QAAMC,IAAID,MACPE,OADO,CACC,SADD,EACY,EADZ,EAEPA,OAFO,CAEC,SAFD,EAEY,EAFZ,EAGPA,OAHO,CAGC,YAHD,EAGe,EAHf,EAIPC,WAJO,GAKPD,OALO,CAKC,OALD,EAKU,GALV,CAAV;AAMA,SAAOD,CAAP;AACD,CARM;;;;AAUA,MAAMG,YAAY,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzC,QAAMC,IAAID,MAAME,IAAN,EAAV;;AACA,MAAI;AACF,UAAMC,MAAMC,KAAKC,KAAL,CAAWJ,CAAX,CAAZ;AACA,UAAM,CAACK,MAAD,EAAS,GAAGC,IAAZ,IAAoBJ,GAA1B;AACA,UAAMK,IAAI,CACRC,OAAOH,MAAP,CADQ,EAERG,OAAOH,OAAOI,GAAP,CAAW,CAAC;AAAEC;AAAF,KAAD,KAAgB,IAAIC,MAAJ,CAAWD,MAAX,CAA3B,CAAP,CAFQ,EAGR,GAAGJ,KAAKG,GAAL,CAASD,MAAT,CAHK,CAAV;AAKA,WAAOD,EAAEK,IAAF,CAAO,IAAP,CAAP;AACD,GATD,CASE,OAAOC,GAAP,EAAY;AACZtB,QAAI,2BAAJ;AACA,WAAOO,KAAP;AACD;AACF,CAfM;;;;AAiBP,MAAMU,SAAUM,GAAD,IAAS;AACtB,QAAMC,IAAK,KAAID,IAAIF,IAAJ,CAAS,KAAT,CAAgB,IAA/B;AACA,SAAOG,CAAP;AACD,CAHD;;AAKO,MAAMC,eAAe,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,UAAzB,EAAqC3B,KAArC,KAA+C;AACzE,QAAMO,IAAIP,MAAMQ,IAAN,EAAV;AACA,QAAMoB,MAAO,GAAEJ,KAAM,IAAGC,UAAU,SAAV,GAAsB,GAAI,GAAEC,MAAO,GAA3D;AACA,QAAMG,SAAU,MAAKF,aAAaA,UAAb,GAA0B,MAAO,IAAtD;AACA,QAAMG,KAAK,OAAX,CAJyE,CAItD;;AACnB,QAAMC,IAAI,cAAV,CALyE,CAKhD;;AACzB,QAAMC,SAAU,GAAEJ,GAAI,GAAEC,MAAO,EAA/B;AACA,MAAI,CAACtB,EAAEC,IAAF,EAAL,EAAe,OAAOwB,MAAP;AACf;;AACA,QAAMC,OAAOvB,KAAKC,KAAL,CAAWJ,CAAX,CAAb;AACA,MAAI,CAAC0B,KAAKhB,MAAV,EAAkB,OAAOe,MAAP;AAElB,QAAME,QAAQD,KAAKjB,GAAL,CAAS,CAAC,CAACmB,IAAD,EAAOC,IAAP,CAAD,KAAkB;AACvC,QAAI,OAAOA,IAAP,IAAe,QAAnB,EAA6B;AAC3B,aAAQ,KAAID,IAAK,KAAIC,IAAK,KAA1B;AACD;;AACD,UAAMnC,IAAIoC,OAAOC,IAAP,CAAYF,IAAZ,EACPpB,GADO,CACFuB,GAAD,IAAS;AACZ;AACA,YAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BL,KAAKG,GAAL,CAAjC,CAFY,CAGZ;;AACA,aAAQ,GAAEA,GAAI,KAAIC,QAAS,GAAEC,eAAgB,MAAKA,YAAa,EAAlC,GAAsC,EAAG,EAAtE;AACD,KANO,EAOPzB,GAPO,CAOH0B,QAAS,KAAIA,IAAK,KAPf,EAQPvB,IARO,CAQD,GAAEW,EAAG,GAAEC,EAAEb,MAAF,CAAS,CAAT,CAAY,EARlB,CAAV;AASA,UAAMyB,IAAK,KAAIR,IAAK,QAAOL,EAAG,GAAEC,EAAEb,MAAF,CAAS,CAAT,CAAY,GAAEjB,CAAE,GAAE6B,EAAG,GAAEC,EAAEb,MAAF,CAAS,CAAT,CAAY,QAAnE;AACA,WAAOyB,CAAP;AACD,GAfa,CAAd;AAkBA,QAAMC,MAAO,GAAEd,EAAG,GAAEC,EAAEb,MAAF,CAAS,CAAT,CAAY,EAAhC;AACA,QAAMI,IAAIY,MAAMf,IAAN,CAAWyB,GAAX,CAAV;AAEA,QAAMnC,MAAO,GAAEmB,GAAI,KAAIgB,GAAI,GAAEtB,CAAE,GAAEQ,EAAG,KAAID,MAAO,EAA/C;AACA,SAAOpB,GAAP;AACD,CAnCM;;;;AAqCA,MAAMoC,gBAAgB,CAACxC,KAAD,EAAQmB,KAAR,EAAeC,OAAf,EAAwBC,MAAxB,EAAgCC,UAAhC,EAA4C3B,KAA5C,KAAsD;AACjF,MAAI;AACF,UAAMS,MAAMc,aAAaC,KAAb,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqCC,UAArC,EAAiD3B,KAAjD,CAAZ;AACA,WAAOS,GAAP;AACD,GAHD,CAGE,OAAOW,GAAP,EAAY;AACZtB,QAAI,kCAAJ;AACA,WAAOO,KAAP;AACD;AACF,CARM;;;AAUA,MAAMyC,gBAAgB,qDAAtB;;AAEA,MAAMC,YAAY;AACvBC,MAAIF,aADmB;AAEvBG,eAAaJ;AAFU,CAAlB","sourcesContent":["import { debuglog } from 'util'\n\nconst LOG = debuglog('doc')\n\nexport const getLink = (title) => {\n  const l = title\n    .replace(/<br\\/>/g, '')\n    .replace(/&nbsp;/g, '')\n    .replace(/[^\\w-\\d ]/g, '')\n    .toLowerCase()\n    .replace(/[, ]/g, '-')\n  return l\n}\n\nexport const tableRule = (match, table) => {\n  const t = table.trim()\n  try {\n    const res = JSON.parse(t)\n    const [header, ...rows] = res\n    const a = [\n      getRow(header),\n      getRow(header.map(({ length }) => '-'.repeat(length))),\n      ...rows.map(getRow),\n    ]\n    return a.join('\\n')\n  } catch (err) {\n    LOG('could not parse the table')\n    return match\n  }\n}\n\nconst getRow = (row) => {\n  const s = `| ${row.join(' | ')} |`\n  return s\n}\n\nexport const replaceTitle = (level, isAsync, method, returnType, title) => {\n  const t = title.trim()\n  const sig = `${level} ${isAsync ? '`async ' : '`'}${method}(`\n  const endSig = `): ${returnType ? returnType : 'void'}\\``\n  const nl = '<br/>' // '<br/>'\n  const i = '&nbsp;&nbsp;' // '&nbsp;\n  const single = `${sig}${endSig}`\n  if (!t.trim()) return single\n  /** @type {[]} */\n  const args = JSON.parse(t)\n  if (!args.length) return single\n\n  const lines = args.map(([name, type]) => {\n    if (typeof type == 'string') {\n      return `\\`${name}: ${type},\\``\n    }\n    const l = Object.keys(type)\n      .map((key) => {\n        // const isRequired = key.endsWith('?')\n        const [propType, defaultValue] = type[key]\n        // static?: boolean = true,\n        return `${key}: ${propType}${defaultValue ? ` = ${defaultValue}` : ''}`\n      })\n      .map(line => `\\`${line},\\``)\n      .join(`${nl}${i.repeat(2)}`)\n    const n = `\\`${name}: {\\`${nl}${i.repeat(2)}${l}${nl}${i.repeat(1)}\\`},\\``\n    return n\n  })\n\n\n  const nls = `${nl}${i.repeat(1)}`\n  const s = lines.join(nls)\n\n  const res = `${sig}\\`${nls}${s}${nl}\\`${endSig}`\n  return res\n}\n\nexport const titleReplacer = (match, level, isAsync, method, returnType, title) => {\n  try {\n    const res = replaceTitle(level, isAsync, method, returnType, title)\n    return res\n  } catch (err) {\n    LOG('could not parse the method title')\n    return match\n  }\n}\n\nexport const methodTitleRe = /```(#+)( async)? (\\w+)(?: => (.+)\\n)?([\\s\\S]*?)```/g\n\nexport const titleRule = {\n  re: methodTitleRe,\n  replacement: titleReplacer,\n}\n"],"file":"index.js"}