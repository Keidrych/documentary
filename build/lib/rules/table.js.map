{"version":3,"sources":["../../../src/lib/rules/table.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;;AAE9B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC;;AAE1B,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACxC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;EACrB,GAAG,CAAC;IACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxB,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1B,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MACR,MAAM,CAAC,MAAM,CAAC;MACd,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;MACtD,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;IACrB;IACA,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAChC,MAAM,CAAC;EACT;AACF;;AAEA,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACtB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACjC,MAAM,CAAC;AACT;;AAEA,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAElC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;EAChB,EAAE;EACF,WAAW,CAAC,CAAC,QAAQ;AACvB;;AAEA,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC;;AAEvB,MAAM,CAAC,OAAO,CAAC","file":"lib/rules/table.js","sourcesContent":["import { debuglog } from 'util'\n\nconst LOG = debuglog('doc')\n\nexport const replacer = (match, table) => {\n  const t = table.trim()\n  try {\n    const res = JSON.parse(t)\n    const [header, ...rows] = res\n    const a = [\n      getRow(header),\n      getRow(header.map(({ length }) => '-'.repeat(length))),\n      ...rows.map(getRow),\n    ]\n    return a.join('\\n')\n  } catch (err) {\n    LOG('Could not parse the table.')\n    return match\n  }\n}\n\nconst getRow = (row) => {\n  const s = `| ${row.join(' | ')} |`\n  return s\n}\n\nconst re = /```table([\\s\\S]+?)```/mg\n\nconst tableRule = {\n  re,\n  replacement: replacer,\n}\n\nexport { re as tableRe }\n\nexport default tableRule\n"]}