{"version":3,"sources":["../../../src/lib/rules/example.js"],"names":["LOG","read","source","rs","data","Promise","r","j","promise","Catchment","on","res","replacer","match","from","to","type","f","trim","replace","m","fr","ext","err","re","exampleRule","replacement"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;;AAEA,MAAMC,OAAO,MAAOC,MAAP,IAAkB;AAC7B,QAAMC,KAAK,0BAAiBD,MAAjB,CAAX;AACA,QAAME,OAAO,MAAM,IAAIC,OAAJ,CAAY,OAAOC,CAAP,EAAUC,CAAV,KAAgB;AAC7C,UAAM;AAAEC;AAAF,QAAc,IAAIC,kBAAJ,CAAc;AAAEN;AAAF,KAAd,CAApB;AACAA,OAAGO,EAAH,CAAM,OAAN,EAAeH,CAAf;AACA,UAAMI,MAAM,MAAMH,OAAlB;AACAF,MAAEK,GAAF;AACD,GALkB,CAAnB;AAMA,SAAOP,IAAP;AACD,CATD;;AAWO,MAAMQ,WAAW,OAAOC,KAAP,EAAcX,MAAd,EAAsBY,IAAtB,EAA4BC,EAA5B,EAAgCC,IAAhC,KAAyC;AAC/D,MAAI;AACF,QAAIC,IAAI,MAAMhB,KAAKC,MAAL,CAAd;AACAe,QAAIA,EAAEC,IAAF,EAAJ;;AACA,QAAIJ,QAAQC,EAAZ,EAAgB;AACdE,UAAIA,EAAEE,OAAF,CAAU,kCAAV,EAA8C,CAACC,CAAD,EAAIC,EAAJ,KAAW;AAC3D,YAAIA,MAAMP,IAAV,EAAgB,OAAOM,EAAED,OAAF,CAAUE,EAAV,EAAcN,EAAd,CAAP;AAChB,eAAOK,CAAP;AACD,OAHG,CAAJ;AAID;;AACD,WAAQ,SAAQJ,QAAQ,iBAAMd,MAAN,EAAcoB,GAAd,CAAkBH,OAAlB,CAA0B,KAA1B,EAAiC,EAAjC,CAAqC;EAC/DF,EAAEC,IAAF,EAAS;OADP;AAGD,GAZD,CAYE,OAAOK,GAAP,EAAY;AACZvB,QAAIuB,GAAJ;AACA,WAAOV,KAAP;AACD;AACF,CAjBM;;;AAkBA,MAAMW,KAAK,4DAAX;;AAEP,MAAMC,cAAc;AAClBD,IADkB;AAElBE,eAAad;AAFK,CAApB;eAKea,W","sourcesContent":["import { debuglog } from 'util'\nimport { parse } from 'path'\nimport { createReadStream } from 'fs'\nimport Catchment from 'catchment'\n\nconst LOG = debuglog('doc')\n\nconst read = async (source) => {\n  const rs = createReadStream(source)\n  const data = await new Promise(async (r, j) => {\n    const { promise } = new Catchment({ rs })\n    rs.on('error', j)\n    const res = await promise\n    r(res)\n  })\n  return data\n}\n\nexport const replacer = async (match, source, from, to, type) => {\n  try {\n    let f = await read(source)\n    f = f.trim()\n    if (from && to) {\n      f = f.replace(/^import .+? from ['\"](.+)['\"]$/mg, (m, fr) => {\n        if (fr == from) return m.replace(fr, to)\n        return m\n      })\n    }\n    return `\\`\\`\\`${type || parse(source).ext.replace(/^\\./, '')}\n${f.trim()}\n\\`\\`\\``\n  } catch (err) {\n    LOG(err)\n    return match\n  }\n}\nexport const re = /^%EXAMPLE: (.[^,]+)(?:, (.+?) => (.[^,]+))?(?:, (.+))?%$/gm\n\nconst exampleRule = {\n  re,\n  replacement: replacer,\n}\n\nexport default exampleRule\n"],"file":"example.js"}