{"version":3,"sources":["../../../src/lib/rules/typedef-js.js"],"names":[],"mappings":"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","file":"lib/rules/typedef-js.js","sourcesContent":["import { debuglog } from 'util'\nimport extractTags from 'rexml'\nimport { read } from '..'\nimport Type from '../typedef/Type'\n\nconst LOG = debuglog('doc')\n\nexport const typedefJsRe = /^\\/\\* documentary (.+?) \\*\\/\\n(?:([^\\n][\\s\\S]+?\\n))?$/mg\n\n\n// const makePropsDesc = (props) => {\n//   return ''\n//   if (!props.length) return ''\n//   const l = props.map(({ props: { name, opt } }) => {\n//     const n = opt ? `[${name}]` : name\n//     return `\\`${n}\\``\n//   })\n//   return `Has properties: ${l.join(', ')}.`\n// }\n\nconst makeBlock = (s) => {\n  return `/**\n${s}\n */\n`\n}\n\n/**\n * @typedef {import('restream').AsyncReplacer} AsyncReplacer\n * @type {{re: RegExp, replacement: AsyncReplacer}}\n */\nconst typedefRule = {\n  re: typedefJsRe,\n  async replacement(match, location) {\n    try {\n      LOG('Detected type marker: %s', location)\n      const xml = await read(location)\n      const root = extractTags('types', xml)\n      if (!root.length) throw new Error('XML file should contain root types element.')\n\n      const [{ content: Root }] = root\n\n      const types = extractTags('type', Root)\n      const typedefs = types.map(({ content, props }) => {\n        const tt = new Type()\n        tt.fromXML(content, props)\n        return tt\n      })\n\n      this.emit('types', typedefs) // remember types for js-replace-stream\n\n      const ts = typedefs\n        .map(tt => tt.toTypedef())\n\n      // imports\n      const is = extractTags('import', Root)\n        .map(({ props: { name, from } }) => ` * @typedef {import('${from}').${name}} ${name}`)\n\n      const iss = is.join('\\n')\n      const tss = ts.join('\\n *\\n')\n      const importsAndTypes = `${is.length ? `${iss}\\n *\\n` : ''}${tss}`\n\n      const b = makeBlock(importsAndTypes)\n      const typedef = `/* documentary ${location} */\\n${b}`\n      return typedef\n    } catch (e) {\n      LOG('(%s) Could not process typedef-js: %s', location, e.message)\n      return match\n    }\n  },\n}\n\nexport default typedefRule\n"]}