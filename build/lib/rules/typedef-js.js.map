{"version":3,"sources":["../../../src/lib/rules/typedef-js.js"],"names":["LOG","typedefJsRe","getDefaultName","name","hasDefault","defaultValue","type","d","includes","n","makeProp","opt","desc","Error","undefined","nn","p","getPropType","number","string","boolean","makePropsDesc","props","makeType","pd","t","ps","map","content","propName","default","defaultVal","propType","pt","res","s","join","makeBlock","typedefRule","re","replacement","match","location","xml","types","length","Types","ts","typedef","e","message"],"mappings":"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","sourcesContent":["import { debuglog } from 'util'\nimport extractTags from 'rexml'\nimport { read } from '..'\n\nconst LOG = debuglog('doc')\n\nexport const typedefJsRe = /^\\/\\* documentary (.+?) \\*\\/\\n(?:([^\\n][\\s\\S]+?\\n))?$/mg\n\nconst getDefaultName = (name, hasDefault, defaultValue, type) => {\n  if (!hasDefault) return name\n  const d = ['number', 'boolean'].includes(type) ? defaultValue : `\"${defaultValue}\"`\n  const n = `${name}=${d}`\n  return n\n}\n\nconst makeProp = (name, opt, type = '*', defaultValue, desc = '') => {\n  if (!name) throw new Error('Property does not have a value.')\n  const hasDefault = defaultValue !== undefined\n  const n = getDefaultName(name, hasDefault, defaultValue, type)\n  const nn = opt ? `[${n}]` : n\n  const d = hasDefault ? ` Default \\`${defaultValue}\\`.` : ''\n  const p = ` * @prop {${type}} ${nn} ${desc}${d}`\n  return p\n}\n\nexport const getPropType = ({ number, string, boolean, type }) => {\n  if (string) return 'string'\n  if (number) return 'number'\n  if (boolean) return 'boolean'\n  if (type) return type\n  return 'any'\n}\n\nconst makePropsDesc = (props) => {\n  return ''\n  // if (!props.length) return ''\n  // const l = props.map(({ props: { name, opt } }) => {\n  //   const n = opt ? `[${name}]` : name\n  //   return `\\`${n}\\``\n  // })\n  // return `Has properties: ${l.join(', ')}.`\n}\n\nconst makeType = (name, type = 'Object', desc, props) => {\n  if (!name) throw new Error('Type does not have a name.')\n  const pd = makePropsDesc(props)\n\n  const t = ` * @typedef {${type}} ${name}${desc ? ` ${desc}` : ''}${pd ? ` ${pd}` : ''}`\n  const ps = props.map(({ content, props: { name: propName, opt, default: defaultVal, ...propType } }) => {\n    const pt = getPropType(propType)\n    const p = makeProp(propName, opt, pt, defaultVal, content)\n    return p\n  })\n  const res = [t, ...ps]\n  const s = res.join('\\n')\n  return s\n}\n\nconst makeBlock = (s) => {\n  return `/**\n${s}\n */\n`\n}\n\n/**\n * @typedef {import('restream').AsyncReplacer} AsyncReplacer\n * @type {{re: RegExp, replacement: AsyncReplacer}}\n */\nconst typedefRule = {\n  re: typedefJsRe,\n  async replacement(match, location) {\n    try {\n      LOG('Detected type marker: %s', location)\n      const xml = await read(location)\n      const types = extractTags('types', xml)\n      if (!types.length) throw new Error('XML file should contain root types element.')\n\n      const [{ content: Types }] = types\n\n      const ts = extractTags('t', Types)\n      const s = ts.map(({ content, props: { name, type, desc } }) => {\n        const ps = extractTags('p', content)\n        return makeType(name, type, desc, ps)\n      })\n      const t = s.join('\\n')\n      const typedef = `/* documentary ${location} */\\n${makeBlock(t)}`\n      return typedef\n    } catch (e) {\n      LOG('(%s) Could not process typdef-js: %s', location, e.message)\n      return match\n    }\n  },\n}\n\nexport default typedefRule\n"],"file":"typedef-js.js"}