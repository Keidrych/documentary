{"version":3,"sources":["../../../src/lib/rules/typedef-js.js"],"names":["LOG","typedefJsRe","makeBlock","s","typedefRule","re","replacement","match","location","xml","root","length","Error","content","Root","ts","typedefs","map","props","tt","Type","fromXML","emit","t","toTypedef","join","is","name","from","iss","b","typedef","e","message"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;AAEO,MAAMC,cAAc,yDAApB,C,CAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,YAAaC,CAAD,IAAO;AACvB,SAAQ;EACRA,CAAE;;CADF;AAID,CALD;AAOA;;;;;;AAIA,MAAMC,cAAc;AAClBC,MAAIJ,WADc;;AAElB,QAAMK,WAAN,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmC;AACjC,QAAI;AACFR,UAAI,0BAAJ,EAAgCQ,QAAhC;AACA,YAAMC,MAAM,MAAM,YAAKD,QAAL,CAAlB;AACA,YAAME,OAAO,oBAAY,OAAZ,EAAqBD,GAArB,CAAb;AACA,UAAI,CAACC,KAAKC,MAAV,EAAkB,MAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AAElB,YAAM,CAAC;AAAEC,iBAASC;AAAX,OAAD,IAAsBJ,IAA5B;AAEA,YAAMK,KAAK,oBAAY,GAAZ,EAAiBD,IAAjB,CAAX;AACA,YAAME,WAAWD,GAAGE,GAAH,CAAO,CAAC;AAAEJ,eAAF;AAAWK;AAAX,OAAD,KAAwB;AAC9C,cAAMC,KAAK,IAAIC,aAAJ,EAAX;AACAD,WAAGE,OAAH,CAAWR,OAAX,EAAoBK,KAApB;AACA,eAAOC,EAAP;AACD,OAJgB,CAAjB,CATE,CAeF;;AACA,WAAKG,IAAL,CAAU,OAAV,EAAmBN,QAAnB;AAEA,YAAMO,IAAIP,SACPC,GADO,CACHE,MAAMA,GAAGK,SAAH,EADH,EAEPC,IAFO,CAEF,QAFE,CAAV,CAlBE,CAsBF;;AACA,YAAMC,KAAK,oBAAY,GAAZ,EAAiBZ,IAAjB,EACRG,GADQ,CACJ,CAAC;AAAEC,eAAO;AAAES,cAAF;AAAQC;AAAR;AAAT,OAAD,KAAgC,wBAAuBA,IAAK,MAAKD,IAAK,KAAIA,IAAK,EAD3E,CAAX;AAEA,YAAME,MAAMH,GAAGD,IAAH,CAAQ,IAAR,CAAZ;AAEA,YAAMK,IAAI5B,UAAW,GAAEwB,GAAGf,MAAH,GAAa,GAAEkB,GAAI,GAAEN,IAAI,IAAJ,GAAW,EAAG,EAAnC,GAAuC,EAAG,GAAEA,KAAK,EAAG,EAAjE,CAAV;AACA,YAAMQ,UAAW,kBAAiBvB,QAAS,QAAOsB,CAAE,EAApD;AACA,aAAOC,OAAP;AACD,KA9BD,CA8BE,OAAOC,CAAP,EAAU;AACVhC,UAAI,sCAAJ,EAA4CQ,QAA5C,EAAsDwB,EAAEC,OAAxD;AACA,aAAO1B,KAAP;AACD;AACF;;AArCiB,CAApB;eAwCeH,W","sourcesContent":["import { debuglog } from 'util'\nimport extractTags from 'rexml'\nimport { read } from '..'\nimport Type from '../typedef/Type'\n\nconst LOG = debuglog('doc')\n\nexport const typedefJsRe = /^\\/\\* documentary (.+?) \\*\\/\\n(?:([^\\n][\\s\\S]+?\\n))?$/mg\n\n\n// const makePropsDesc = (props) => {\n//   return ''\n//   if (!props.length) return ''\n//   const l = props.map(({ props: { name, opt } }) => {\n//     const n = opt ? `[${name}]` : name\n//     return `\\`${n}\\``\n//   })\n//   return `Has properties: ${l.join(', ')}.`\n// }\n\nconst makeBlock = (s) => {\n  return `/**\n${s}\n */\n`\n}\n\n/**\n * @typedef {import('restream').AsyncReplacer} AsyncReplacer\n * @type {{re: RegExp, replacement: AsyncReplacer}}\n */\nconst typedefRule = {\n  re: typedefJsRe,\n  async replacement(match, location) {\n    try {\n      LOG('Detected type marker: %s', location)\n      const xml = await read(location)\n      const root = extractTags('types', xml)\n      if (!root.length) throw new Error('XML file should contain root types element.')\n\n      const [{ content: Root }] = root\n\n      const ts = extractTags('t', Root)\n      const typedefs = ts.map(({ content, props }) => {\n        const tt = new Type()\n        tt.fromXML(content, props)\n        return tt\n      })\n\n      // remember types for js-replace-stream\n      this.emit('types', typedefs)\n\n      const t = typedefs\n        .map(tt => tt.toTypedef())\n        .join('\\n *\\n')\n\n      // imports\n      const is = extractTags('i', Root)\n        .map(({ props: { name, from } }) => ` * @typedef {import('${from}').${name}} ${name}`)\n      const iss = is.join('\\n')\n\n      const b = makeBlock(`${is.length ? `${iss}${t ? '\\n' : ''}` : ''}${t || ''}`)\n      const typedef = `/* documentary ${location} */\\n${b}`\n      return typedef\n    } catch (e) {\n      LOG('(%s) Could not process typdef-js: %s', location, e.message)\n      return match\n    }\n  },\n}\n\nexport default typedefRule\n"],"file":"typedef-js.js"}