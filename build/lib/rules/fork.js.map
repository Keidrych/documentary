{"version":3,"sources":["../../../src/lib/rules/fork.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY;;;;;AAKlC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;EACf,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAC9B,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;MAClC,QAAQ,CAAC,CAAC,CAAC,CAAC;MACZ,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IACf,CAAC;IACD,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACzB,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM;IACtC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY;EAChD,CAAC;AACH;;AAEA,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxC;;AAEA,MAAM,CAAC,OAAO,CAAC","file":"lib/rules/fork.js","sourcesContent":["import { fork } from 'spawncommand'\n// import { debuglog } from 'util'\n\n// const LOG = debuglog('doc')\n\nconst forkRule = {\n  re: /%FORK(?:-(\\w+))? (.+)%/mg,\n  async replacement(match, lang, m) {\n    const [mod, ...args] = m.split(' ')\n    const { promise } = fork(mod, args, {\n      execArgv: [],\n      stdio: 'pipe',\n    })\n    const { stdout } = await promise\n    const hasBackticks = /```/.test(stdout)\n    return codeSurround(stdout, lang, hasBackticks)\n  },\n}\n\nconst codeSurround = (m, lang = '', hasBackticks = false) => {\n  const t = hasBackticks ? '````' : '```'\n  return `${t}${lang}\\n${m.trim()}\\n${t}`\n}\n\nexport default forkRule\n"]}