{"version":3,"sources":["../../../src/lib/rules/typedef-md.js"],"names":[],"mappings":"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","file":"lib/rules/typedef-md.js","sourcesContent":["import { debuglog } from 'util'\nimport extractTags from 'rexml'\nimport { read } from '..'\nimport Type from '../typedef/Type'\n\nconst LOG = debuglog('doc')\n\nexport const typedefMdRe = /^%TYPEDEF (.+?)(?: (.+?))?%$/mg\n\n/**\n * This rule is used to used to parse a typedefs XML file and place the definition of a type into documentation.\n * @todo Cache extracted types from XML files.\n * @type {{re: RegExp, replacement: AsyncReplacer}}\n */\nconst typedefMdRule = {\n  re: typedefMdRe,\n  async replacement(match, location, typeName) {\n    try {\n      const xml = await read(location)\n      const root = extractTags('types', xml)\n      if (!root.length) throw new Error('XML file should contain root types element.')\n\n      const [{ content: Root }] = root\n      const types = extractTags('type', Root)\n      const typedefs = types\n        .map(({ content, props }) => {\n          const type = new Type()\n          type.fromXML(content, props)\n          return type\n        })\n\n      const imports = extractTags('import', Root)\n        .map(({ props: { name, from, desc } }) => {\n          const type = new Type()\n          type.fromXML('', {\n            name,\n            type: `import('${from}').${name}`,\n            noToc: true,\n            import: true,\n            desc,\n          })\n          return type\n        })\n\n      const ft = [...imports, ...typedefs]\n        .filter(({ name }) => {\n          if (typeName) return name == typeName\n          return true\n        })\n\n      this.emit('types', ft.map(({ name }) => name))\n\n      if (typeName && !ft.length) throw new Error(`Type ${typeName} not found.`)\n\n      const mdt = ft\n        .map((type, _, a) => {\n          return type.toMarkdown(a)\n        })\n\n      return mdt.join('\\n\\n')\n    } catch (e) {\n      LOG('(%s) Could not process typedef-md: %s', location, e.message)\n      return match\n    }\n  },\n}\n\n/**\n * @typedef {import('restream').AsyncReplacer} AsyncReplacer\n */\n\nexport default typedefMdRule\n"]}