{"version":3,"sources":["../../../src/lib/rules/typedef-md.js"],"names":["LOG","typedefMdRe","getLinkToType","allTypes","type","linkType","find","props","name","n","link","undefined","makeTable","h","ps","map","content","opt","default","defaultVal","propType","t","tt","d","res","JSON","stringify","getTypeDef","desc","noToc","nn","line","table","tb","length","typedefMdRule","re","replacement","match","location","typeName","xml","types","Error","Types","ts","getSingle","getMultiple","e","message","trim","join"],"mappings":"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","sourcesContent":["import { debuglog } from 'util'\nimport extractTags from 'rexml'\nimport { read, getLink } from '..'\nimport { getPropType } from './typedef-js'\n\nconst LOG = debuglog('doc')\n\nexport const typedefMdRe = /^%TYPEDEF (.+?)(?: (.+?))?%$/mg\n\nconst getLinkToType = (allTypes, type) => {\n  const linkType = allTypes.find(({ props: { name: n } }) => n == type)\n  const link = linkType ? getLink(linkType.props.name) : undefined\n  return link\n}\n\nconst makeTable = (props, allTypes = []) => {\n  const h = ['Name', 'Type', 'Description', 'Default']\n  const ps = props.map(({ content, props: { name, opt, default: defaultVal, ...propType } }) => {\n    const type = getPropType(propType)\n    const link = getLinkToType(allTypes, type)\n    const t = `_${type}_`\n    const tt = link ? `[${t}](#${link})` : t\n    const n = opt ? name : `__${name}*__`\n    const d = defaultVal === undefined ? '-' : `\\`${defaultVal}\\``\n    return [n, tt, content, d]\n  })\n  const res = [h, ...ps]\n  return JSON.stringify(res)\n}\n\nconst getTypeDef = ({ content, props: { desc, name, type, noToc } }, allTypes = []) => {\n  const props = extractTags('p', content)\n  const t = type ? `\\`${type}\\` ` : ''\n  const n = `\\`${name}\\``\n  const nn = noToc ? n : `[${n}](t)`\n  const line = `${t}__${nn}__${desc ? `: ${desc}` : ''}`\n  const table = makeTable(props, allTypes)\n  const tb = props.length ? `\\`\\`\\`table\n${table}\n\\`\\`\\`` : ''\n  const res = `${line}\n\n${tb}`\n  return res\n}\n\n/**\n * @typedef {import('restream').AsyncReplacer} AsyncReplacer\n * @type {{re: RegExp, replacement: AsyncReplacer}}\n */\nconst typedefMdRule = {\n  re: typedefMdRe,\n  async replacement(match, location, typeName) {\n    try {\n      const xml = await read(location)\n      const types = extractTags('types', xml)\n      if (!types.length) throw new Error('XML file should contain root types element.')\n\n      const [{ content: Types }] = types\n      const ts = extractTags('t', Types)\n\n      if (typeName) return getSingle(ts, typeName)\n      return getMultiple(ts)\n    } catch (e) {\n      LOG('(%s) Could not process typdef-js: %s', location, e.message)\n      return match\n    }\n  },\n}\n\nconst getMultiple = (ts) => {\n  const types = ts.map((type) => {\n    const t = getTypeDef(type, ts)\n    return t.trim()\n  })\n  const res = types.join('\\n\\n')\n  return res\n}\n\nconst getSingle = (ts, typeName) => {\n  const type = ts.find(({ props: { name } }) => name == typeName)\n  if (!type) throw new Error(`Could not find the type ${typeName}`)\n\n  const res = getTypeDef(type)\n  return res\n}\n\nexport default typedefMdRule\n"],"file":"typedef-md.js"}