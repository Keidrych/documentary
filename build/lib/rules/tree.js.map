{"version":3,"sources":["../../../src/lib/rules/tree.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,YAAY;AAC/B,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;;AAE9B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC;;AAE1B,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;EACf,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACnB,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACxB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/C,GAAG,CAAC;MACF,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;MAC3B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACxC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,MAAM,CAAC;MACT;MACA,MAAM,CAAC,YAAY,CAAC,MAAM;IAC5B,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;MACZ,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACxB,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC;QACpC,MAAM,CAAC;MACT;MACA,GAAG,CAAC,GAAG,CAAC,OAAO;MACf,MAAM,CAAC;IACT;EACF,CAAC;AACH;;AAEA,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE3E,MAAM,CAAC,OAAO,CAAC","file":"lib/rules/tree.js","sourcesContent":["import spawn from 'spawncommand'\nimport { debuglog } from 'util'\n\nconst LOG = debuglog('doc')\n\nconst treeRule = {\n  re: /%TREE (.+)%/mg,\n  async replacement(match, m) {\n    const args = m.split(' ')\n    const p = spawn('tree', ['--noreport', ...args])\n    try {\n      const { stdout } = await p.promise\n      if (/\\[error opening dir\\]/.test(stdout)) {\n        LOG('Could not generate a tree for %s', args.join(' '))\n        return match\n      }\n      return codeSurround(stdout)\n    } catch (err) {\n      if (err.code == 'ENOENT') {\n        console.warn('tree is not installed')\n        return match\n      }\n      LOG(err.message)\n      return match\n    }\n  },\n}\n\nconst codeSurround = (m, lang = 'm') => `\\`\\`\\`${lang}\\n${m.trim()}\\n\\`\\`\\``\n\nexport default treeRule\n"]}