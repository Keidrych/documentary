{"version":3,"sources":["../../../src/lib/rules/type.js"],"names":["LOG","typeRe","execRes","re","s","res","exec","args","extractProps","propsRe","t","r","key","value","push","getPropValue","tt","replace","trim","split","filter","a","reduce","k","acc","val","test","parseInt","extractTag","tag","string","RegExp","length","_p","_c","p","props","item","content","strong","getDescAndExample","description","example","isExampleRow","hasExamples","span2","makeTable","properties","tocTitles","some","rows","map","name","type","required","n","nn","e","startsWith","join","typeRule","replacement","match","body","tags","row","table","err","message"],"mappings":"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","sourcesContent":["import { debuglog } from 'util'\n\nconst LOG = debuglog('doc')\n\nconst typeRe = /^%TYPE( .+)?\\n([\\s\\S]+?)\\n%$/mg\n\nexport { typeRe }\n\nconst execRes = (re, s) => {\n  const res = re.exec(s)\n  if (!res) return res\n  const [, ...args] = res\n  return args\n}\nconst extractProps = (s) => {\n  const propsRe = /(\\w+)=\"(.*?)\"/g\n  let t\n  const r = []\n  while ((t = propsRe.exec(s)) !== null) {\n    const [, key, value] = t\n    r.push({\n      key,\n      value: getPropValue(value),\n    })\n  }\n  const tt = s.replace(propsRe, '').trim().split(' ')\n    .filter(a => a)\n    .reduce((a, k) => ({ ...a, [k]: true }), {})\n  return r.reduce((acc, { key, value }) => ({\n    ...acc,\n    [key]: value,\n  }), tt)\n}\n\nconst getPropValue = (val) => {\n  if (val == 'true') return true\n  if (val == 'false') return false\n  if (/^\\d+$/.test(val)) {\n    return parseInt(val, 10)\n  }\n  return val\n}\n\nexport const extractTag = (tag, string) => {\n  const re = new RegExp(`<${tag}( .[^>]+)?(?: /)?>(?:([\\\\s\\\\S]+?)</${tag}>)?`, 'g')\n  const r = []\n\n  let t\n  while ((t = execRes(re, string)) !== null) {\n    if (!t.length) continue\n    const [_p = '', _c = ''] = t\n    const p = _p.replace(/\\/$/, '').trim()\n    const props = extractProps(p)\n    const item = {\n      props,\n      content: _c,\n    }\n    r.push(item)\n  }\n  return r\n}\n\nconst tag = (t, s) => `<${t}>${s}</${t}>`\nconst strong = s => tag('strong', s)\n\nconst getDescAndExample = (description, example, isExampleRow, hasExamples) => {\n  const span2 = hasExamples ? ' colspan=\"2\"' : ''\n  if (!example) {\n    return `<td${span2}>${description}</td>`\n  }\n  if (isExampleRow) {\n    return `<td${span2}>${description}</td>\n  </tr>\n  <tr></tr>\n  <tr>\n   <td colspan=\"${hasExamples ? 4 : 3}\">${example}</td>`\n  }\n  return `<td>${description}</td>\n   <td>${example}</td>`\n}\n\nconst makeTable = (properties, tocTitles) => {\n  const hasExamples = properties.some(({ example, isExampleRow }) => example && !isExampleRow)\n  const rows = properties.map(({ name, type, required, description = '', example = '', isExampleRow }) => {\n    const t = `<code>${name}</code>`\n    const n = required ? strong(t) : t\n    const nn = tocTitles ? `[${n}](t)` : n\n    const e = example.startsWith('```') ? `\\n\\n${example}`: example\n    return `  <tr>\n   <td>${nn}</td>\n   <td>${tag('em', type)}</td>\n   ${getDescAndExample(description, e, isExampleRow, hasExamples)}\n  </tr>`\n  })\n  return `<table>\n <thead>\n  <tr>\n   <th>Property</th>\n   <th>Type</th>\n   <th>Description</th>${hasExamples ? '\\n   <th>Example</th>' : ''}\n  </tr>\n </thead>\n <tbody>\n${rows.join('\\n')}\n </tbody>\n</table>\n`\n}\n\nconst typeRule = {\n  re: typeRe,\n  replacement(match, tocTitles, body) {\n    try {\n      const tags = extractTag('p', body)\n        .map(({ content, props }) => {\n          const [{ content: description } = {}] = extractTag('d', content)\n          const [{ content: example, props: { row: isExampleRow = false } = {} } = {}] = extractTag('e', content)\n          return {\n            description,\n            example,\n            isExampleRow,\n            ...props,\n          }\n        })\n      const table = makeTable(tags, tocTitles)\n      return table\n    } catch (err) {\n      LOG('Could not parse type, %s', err.message)\n      return match\n    }\n  },\n}\n\n// const b = (summary, alt, gif) => {\n//   return `\n// <details>\n//   <summary>${summary}</summary>\n//   <table>\n//   <tr><td>\n//     <img alt=\"${alt}\" src=\"${gif}\" />\n//   </td></tr>\n//   </table>\n// </details>\n// `.trim()\n// }\n\nexport default typeRule\n"],"file":"type.js"}