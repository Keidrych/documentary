{"version":3,"sources":["../../../src/lib/rules/macro.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;;AAM3D,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;;;AAOlD,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;;;;EAItC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI;IACvC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;MACZ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO;MACtD,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClB,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrD,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACR,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC7B,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;UACpB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACrB,MAAM,CAAC;QACT,CAAC;MACH,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAChB,CAAC;IACD,MAAM,CAAC;EACT;EACA,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EACxC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACzB,MAAM,CAAC,CAAC;AACV;;AAEA,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;EACrB,EAAE;EACF,WAAW;AACb;;AAEA,MAAM,CAAC,OAAO,CAAC","file":"lib/rules/macro.js","sourcesContent":["export const re = /^%TABLE-MACRO (.+)\\n([\\s\\S]+?)\\n%(\\n|$)/gm\n\n/**\n * Reverse a string.\n * @param {string} s String to reverse.\n */\nconst reverse = s => s.split('').reverse().join('')\n\n/**\n * @param {string} match\n * @param {string} name\n * @param {string} body\n */\nfunction replacement(match, name, body) {\n  /**\n   * @param {string[]} row\n   */\n  const fn = (row) => {\n    const hasEscapedComma = /\\\\,/.test(body)\n    const parts = hasEscapedComma\n      ? reverse(body).split(/,(?!\\\\)/).reverse().map(reverse)\n      : body.split(',')\n    const mappedParts = parts.map(p => {\n      const t = hasEscapedComma ? p.replace(/\\\\,/g, ',') : p\n      const tt = this.replaceInnerCode ? this.replaceInnerCode(t) : t\n      const r = tt\n        .replace(/\\$(\\d+)/g, (_, s) => {\n          const i = parseInt(s)\n          const val = row[i - 1]\n          return val\n        })\n      return r.trim()\n    })\n    return mappedParts\n  }\n  this.tableMacros = this.tableMacros || {}\n  this.tableMacros[name] = fn\n  return ''\n}\n\nconst tableMacroRule = {\n  re,\n  replacement,\n}\n\nexport default tableMacroRule"]}