{"version":3,"sources":["../../src/bin/run.js"],"names":["LOG","replaceFile","path","out","rs","s","toc","Toc","promise","tocPromise","Catchment","pipe","t","res","realRes","replace","trim","ws","end","on","console","log","run","process","exit"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;;AAEA,MAAMC,cAAc,OAAOC,IAAP,EAAaC,GAAb,KAAqB;AACvC,QAAMC,KAAK,0BAAiBF,IAAjB,CAAX;AACA,QAAMG,IAAI,6BAAV;AAEA,QAAMC,MAAM,IAAIC,YAAJ,EAAZ;AAEA,QAAM;AAAEC,aAASC;AAAX,MAA0B,IAAIC,kBAAJ,CAAc;AAC5CN,QAAIE;AADwC,GAAd,CAAhC;AAGA,QAAM;AAAEE;AAAF,MAAc,IAAIE,kBAAJ,CAAc;AAChCN,QAAIC;AAD4B,GAAd,CAApB;AAIAD,KAAGO,IAAH,CAAQN,CAAR,EAAWM,IAAX,CAAgBL,GAAhB;AAEA,QAAMM,IAAI,MAAMH,UAAhB;AACA,QAAMI,MAAM,MAAML,OAAlB;AAEA,QAAMM,UAAUD,IAAIE,OAAJ,CAAY,WAAZ,EAAyBH,EAAEI,IAAF,EAAzB,CAAhB;;AACA,MAAIb,GAAJ,EAAS;AACP,UAAMc,KAAK,2BAAkBd,GAAlB,CAAX;AACAc,OAAGC,GAAH,CAAOJ,OAAP;AAEAG,OAAGE,EAAH,CAAM,OAAN,EAAe,MAAM;AACnBC,cAAQC,GAAR,CAAY,kBAAZ,EAAgClB,GAAhC,EAAqCD,IAArC;AACD,KAFD;AAGD,GAPD,MAOO;AACLkB,YAAQC,GAAR,CAAYP,OAAZ;AACD;AACF,CA7BD;AA+BA;;;;;;;;AAMe,eAAeQ,GAAf,CAAmBpB,IAAnB,EAAyBC,GAAzB,EAA8BG,GAA9B,EAAmC;AAChDN,MAAI,YAAJ,EAAkBE,IAAlB;;AACA,MAAII,GAAJ,EAAS;AACP,UAAMM,IAAI,MAAM,iBAAOV,IAAP,CAAhB;AACAkB,YAAQC,GAAR,CAAYT,CAAZ;AACAW,YAAQC,IAAR;AACD;;AAED,QAAMvB,YAAYC,IAAZ,EAAkBC,GAAlB,CAAN;AACD","sourcesContent":["import Toc, { getToc } from '../lib/Toc'\nimport { debuglog } from 'util'\nimport { createReadStream, createWriteStream } from 'fs'\nimport Catchment from 'catchment'\nimport createReplaceStream from '../lib/replace-stream'\n\nconst LOG = debuglog('doc')\n\nconst replaceFile = async (path, out) => {\n  const rs = createReadStream(path)\n  const s = createReplaceStream()\n\n  const toc = new Toc()\n\n  const { promise: tocPromise } = new Catchment({\n    rs: toc,\n  })\n  const { promise } = new Catchment({\n    rs: s,\n  })\n\n  rs.pipe(s).pipe(toc)\n\n  const t = await tocPromise\n  const res = await promise\n\n  const realRes = res.replace(/^%TOC%$/gm, t.trim())\n  if (out) {\n    const ws = createWriteStream(out)\n    ws.end(realRes)\n\n    ws.on('close', () => {\n      console.log('Saved %s from %s', out, path)\n    })\n  } else {\n    console.log(realRes)\n  }\n}\n\n/**\n * @param {string} path\n * @param {string} [out]\n * @param {string} [out]\n * @param {boolean} [toc]\n */\nexport default async function run(path, out, toc) {\n  LOG('reading %s', path)\n  if (toc) {\n    const t = await getToc(path)\n    console.log(t)\n    process.exit()\n  }\n\n  await replaceFile(path, out)\n}\n"],"file":"run.js"}