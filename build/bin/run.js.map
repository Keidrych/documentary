{"version":3,"sources":["../../src/bin/run.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM;AACrC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG;AAClC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW;AAC3C,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;AACjC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ;;;;;;;;;;;AAW5C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;EACzC,KAAK,CAAC;IACJ,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE;EAC5C,CAAC,CAAC,CAAC,CAAC;EACJ,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAO;;;EAGxC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM;;EAErD,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAO;EACzC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS;EAC/C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;IACX,OAAO,CAAC,GAAG,CAAC,GAAG;IACf,OAAO,CAAC,IAAI,CAAC;EACf;;EAEA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAO;EACzC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC;EACrD,OAAO,CAAC,IAAI,CAAC,GAAG;EAChB,KAAK,CAAC,WAAW,CAAC;IAChB,QAAQ,CAAC,CAAC,GAAG;IACb,WAAW,CAAC,CAAC,MAAM;EACrB,CAAC;EACD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjB,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;EACjD;AACF","file":"bin/run.js","sourcesContent":["import whichStream from 'which-stream'\nimport { getToc } from '../lib/Toc'\nimport Documentary from '../lib/Documentary'\nimport { getStream } from '../lib'\nimport { getTypedefs } from '../lib/Typedefs'\n\n/**\n * Run the documentary and save the results.\n * @param {RunOptions} options Options for the run command.\n * @param {string} options.source The path to the source directory or file.\n * @param {string} [options.output=\"-\"] The path where to save the output. When `-` is passed, prints to `stdout`. Default `-`.\n * @param {boolean} [options.reverse=false] Read files in directories in reverse order, such that `30.md` comes before `1.md`. Useful for blogs. Default `false`.\n * @param {boolean} [options.justToc=false] Only print the table of contents and exit. Default `false`.\n * @param {boolean} [options.h1=false] Include `H1` headers in the table of contents. Default `false`.\n */\nexport default async function run(options) {\n  const {\n    source, output = '-', reverse, justToc, h1,\n  } = options\n  const stream = getStream(source, reverse)\n  // todo: figure out why can't create a pass-through, pipe into it and pause it\n\n  const { types, locations } = await getTypedefs(stream)\n\n  const stream2 = getStream(source, reverse)\n  const toc = await getToc(stream2, h1, locations)\n  if (justToc) {\n    console.log(toc)\n    process.exit()\n  }\n\n  const stream3 = getStream(source, reverse)\n  const doc = new Documentary({ toc, locations, types })\n  stream3.pipe(doc)\n  await whichStream({\n    readable: doc,\n    destination: output,\n  })\n  if (output != '-') {\n    console.log('Saved documentation to %s', output)\n  }\n}\n\n/* documentary types/run.xml */\n/**\n * @typedef {Object} RunOptions Options for the run command.\n * @prop {string} source The path to the source directory or file.\n * @prop {string} [output=\"-\"] The path where to save the output. When `-` is passed, prints to `stdout`. Default `-`.\n * @prop {boolean} [reverse=false] Read files in directories in reverse order, such that `30.md` comes before `1.md`. Useful for blogs. Default `false`.\n * @prop {boolean} [justToc=false] Only print the table of contents and exit. Default `false`.\n * @prop {boolean} [h1=false] Include `H1` headers in the table of contents. Default `false`.\n */\n"]}