{"version":3,"sources":["../../src/bin/run.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG;AAClC,MAAM,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;AACrC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM;AACtD,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM;;AAEnC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,GAAG;;IAEjC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;;IAElD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;IACtB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;MACP,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnB,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;QAC3B,CAAC,CAAC;MACJ,CAAC;MACD,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,IAAI,CAAC;MACL,CAAC,CAAC;IACJ;EACF,CAAC;AACH;;;;;;;AAOA,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;EACtD,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC;EAC3B,EAAE,CAAC,KAAK,CAAC;EACT,MAAM,CAAC,IAAI,CAAC,EAAE;EACd,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM;EAC7B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;IACX,OAAO,CAAC,GAAG,CAAC,CAAC;IACb,OAAO,CAAC,IAAI,CAAC;EACf;EACA,EAAE,CAAC,MAAM,CAAC;EACV,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;AAC9B","file":"bin/run.js","sourcesContent":["import { getToc } from '../lib/Toc'\nimport { createWriteStream } from 'fs'\nimport createReplaceStream from '../lib/replace-stream'\nimport { PassThrough } from 'stream'\n\nconst replaceFile = async (stream, toc, out) => {\n  await new Promise((r, j) => {\n    const s = createReplaceStream(toc)\n\n    const ws = out ? createWriteStream(out) : process.stdout\n\n    stream.pipe(s).pipe(ws)\n    if (out) {\n      ws.on('close', () => {\n        console.log('Saved %s', out)\n        r()\n      })\n      ws.on('error', j)\n    } else {\n      r()\n    }\n  })\n}\n\n/**\n * @param {Readable} stream A readable stream.\n * @param {string} [out] Path to the output file.\n * @param {boolean} [justToc] Just print the TOC.\n */\nexport default async function run(stream, out, justToc) {\n  const pt = new PassThrough()\n  pt.pause()\n  stream.pipe(pt)\n  const t = await getToc(stream)\n  if (justToc) {\n    console.log(t)\n    process.exit()\n  }\n  pt.resume()\n  await replaceFile(pt, t, out)\n}\n"]}