{"version":3,"sources":["../../src/bin/index.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","source","_source","output","_output","toc","_toc","watch","_watch","command","short","boolean","doc","justToc","console","log","exit","ls","stream","isDirectory","Pedantry","isFile","stack","message","code","debounce","recursive","setTimeout"],"mappings":"AAAA;;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;AACA,MAAMC,QAAQ,MAAMC,IAAN,CAAWC,QAAQC,GAAR,CAAYC,UAAvB,CAAd;AAEA,MAAM;AACJC,UAAQC,OADJ;AAEJC,UAAQC,OAFJ;AAGJC,OAAKC,IAHD;AAIJC,SAAOC;AAJH,IAKF,qBAAO;AACTP,UAAQ;AACNQ,aAAS;AADH,GADC;AAITJ,OAAK;AACHK,WAAO,GADJ;AAEHC,aAAS;AAFN,GAJI;AAQTJ,SAAO;AACLG,WAAO,GADF;AAELC,aAAS;AAFJ,GARE;AAYTR,UAAQ;AAZC,CAAP,CALJ;;AAoBA,MAAMS,MAAM,OAAOX,MAAP,EAAeE,MAAf,EAAuBU,UAAU,KAAjC,KAA2C;AACrD,MAAI,CAACZ,MAAL,EAAa;AACXa,YAAQC,GAAR,CAAY,+BAAZ,EADW,CACkC;;AAC7CjB,YAAQkB,IAAR,CAAa,CAAb;AACD;;AACD,QAAMC,KAAK,mBAAUhB,MAAV,CAAX;AACA,MAAIiB,MAAJ;;AACA,MAAID,GAAGE,WAAH,EAAJ,EAAsB;AACpBD,aAAS,IAAIE,iBAAJ,CAAanB,MAAb,CAAT;AACD,GAFD,MAEO,IAAIgB,GAAGI,MAAH,EAAJ,EAAiB;AACtBH,aAAS,0BAAiBjB,MAAjB,CAAT;AACD;;AACD,QAAM,kBAAIiB,MAAJ,EAAYf,MAAZ,EAAoBU,OAApB,CAAN;AACD,CAbD;;AAeA,CAAC,YAAY;AACX,MAAI;AACF,UAAMD,IAAIV,OAAJ,EAAaE,OAAb,EAAsBE,IAAtB,CAAN;AACD,GAFD,CAEE,OAAO;AAAEgB,SAAF;AAASC,WAAT;AAAkBC;AAAlB,GAAP,EAAiC;AACjC,QAAIA,QAAQ,QAAZ,EAAsB;AACpBV,cAAQC,GAAR,CAAY,yBAAZ,EAAuCb,OAAvC;AACAJ,cAAQkB,IAAR,CAAa,CAAb;AACD;;AACDpB,YAAQD,IAAI2B,KAAJ,CAAR,GAAqBR,QAAQC,GAAR,CAAYQ,OAAZ,CAArB;AACD;;AACD,MAAIE,WAAW,KAAf;;AACA,MAAIjB,MAAJ,EAAY;AACV,mBAAMN,OAAN,EAAe;AAAEwB,iBAAW;AAAb,KAAf,EAAoC,YAAY;AAC9C,UAAI,CAACD,QAAL,EAAe;AACbA,mBAAW,IAAX;AACA,cAAMb,IAAIV,OAAJ,EAAaE,OAAb,EAAsBE,IAAtB,CAAN;AACAqB,mBAAW,MAAM;AAAEF,qBAAW,KAAX;AAAkB,SAArC,EAAuC,GAAvC;AACD;AACF,KAND;AAOD;AACF,CApBD","sourcesContent":["#!/usr/bin/env node\nimport { watch } from 'fs'\nimport argufy from 'argufy'\nimport { lstatSync, createReadStream } from 'fs'\nimport Pedantry from 'pedantry'\nimport { debuglog } from 'util'\nimport run from './run'\n\nconst LOG = debuglog('doc')\nconst DEBUG = /doc/.test(process.env.NODE_DEBUG)\n\nconst {\n  source: _source,\n  output: _output,\n  toc: _toc,\n  watch: _watch,\n} = argufy({\n  source: {\n    command: true,\n  },\n  toc: {\n    short: 't',\n    boolean: true,\n  },\n  watch: {\n    short: 'w',\n    boolean: true,\n  },\n  output: 'o',\n})\n\nconst doc = async (source, output, justToc = false) => {\n  if (!source) {\n    console.log('Please specify an input file.') // print usage\n    process.exit(1)\n  }\n  const ls = lstatSync(source)\n  let stream\n  if (ls.isDirectory()) {\n    stream = new Pedantry(source)\n  } else if (ls.isFile()) {\n    stream = createReadStream(source)\n  }\n  await run(stream, output, justToc)\n}\n\n(async () => {\n  try {\n    await doc(_source, _output, _toc)\n  } catch ({ stack, message, code }) {\n    if (code == 'ENOENT') {\n      console.log('File %s does not exist.', _source)\n      process.exit(2)\n    }\n    DEBUG ? LOG(stack) : console.log(message)\n  }\n  let debounce = false\n  if (_watch) {\n    watch(_source, { recursive: true }, async () => {\n      if (!debounce) {\n        debounce = true\n        await doc(_source, _output, _toc)\n        setTimeout(() => { debounce = false }, 100)\n      }\n    })\n  }\n})()\n"],"file":"index.js"}