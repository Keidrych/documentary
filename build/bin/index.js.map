{"version":3,"sources":["../../src/bin/index.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","source","_source","output","_output","toc","_toc","watch","_watch","push","_push","typedef","_typedef","version","_version","console","log","exit","argv","find","a","doc","justToc","ls","stream","isDirectory","Pedantry","isFile","docJs","stack","message","code","debounce","recursive","gitPush","setTimeout","promise","stdout","s","trim","git","args","stdio"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport { watch } from 'fs'\nimport { lstatSync, createReadStream } from 'fs'\nimport Pedantry from 'pedantry'\nimport { debuglog } from 'util'\nimport spawn from 'spawncommand'\nimport run from './run'\nimport getArgs from './get-args'\nimport runJs from './run-js'\nimport { version } from '../../package.json'\n\nconst LOG = debuglog('doc')\nconst DEBUG = /doc/.test(process.env.NODE_DEBUG)\n\nconst {\n  source: _source,\n  output: _output,\n  toc: _toc,\n  watch: _watch,\n  push: _push,\n  typedef: _typedef,\n  version: _version,\n} = getArgs()\n\n\nif(_version) {\n  console.log(version)\n  process.exit(0)\n}\n\nif (process.argv.find(a => a == '-p') && !_push) {\n  console.log('Please specify a commit message.')\n  process.exit(1)\n}\n\nconst doc = async (source, output, justToc = false) => {\n  if (!source) {\n    console.log('Please specify an input file.') // print usage\n    process.exit(1)\n  }\n  const ls = lstatSync(source)\n  let stream\n  if (ls.isDirectory()) {\n    stream = new Pedantry(source)\n  } else if (ls.isFile()) {\n    stream = createReadStream(source)\n  }\n  await run(stream, output, justToc)\n}\n\nconst docJs = async (source, output) => {\n  if (!source) {\n    console.log('Please specify a JavaScript file.')\n    process.exit(1)\n  }\n  try {\n    await runJs(source, output)\n  } catch ({ stack, message }) {\n    DEBUG ? LOG(stack) : console.log(message)\n    process.exit(1)\n  }\n}\n\n\n(async () => {\n  if (_typedef) {\n    await docJs(_source, _output)\n    return\n  }\n  try {\n    await doc(_source, _output, _toc)\n  } catch ({ stack, message, code }) {\n    if (code == 'ENOENT') {\n      console.log('File %s does not exist.', _source)\n      process.exit(2)\n    }\n    DEBUG ? LOG(stack) : console.log(message)\n  }\n  let debounce = false\n  if (_watch || _push) {\n    watch(_source, { recursive: true }, async () => {\n      if (!debounce) {\n        debounce = true\n        await doc(_source, _output, _toc)\n        if (_push) {\n          console.log('Pushing documentation changes')\n          await gitPush(_source, _output, _push)\n        }\n        setTimeout(() => { debounce = false }, 100)\n      }\n    })\n  }\n})()\n\nconst gitPush = async (source, output, message) => {\n  const { promise } = spawn('git', ['log', '--format=%B', '-n', '1'])\n  const { stdout } = await promise\n  const s = stdout.trim()\n  if (s == message) {\n    await git('reset', 'HEAD~1')\n  }\n  await git('add', source, output)\n  await git('commit', '-m', message)\n  await git('push', '-f')\n}\n\nconst git = async (...args) => {\n  const { promise } = spawn('git', args, { stdio: 'inherit' })\n  await promise\n}\n"],"file":"index.js"}