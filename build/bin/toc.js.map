{"version":3,"sources":["../../src/bin/toc.js"],"names":["LOG","replaceFile","path","re","replacement","outfile","rs","s","ws","process","stdout","pipe","on","console","log","runToc","out","replace","md","Toc","promise","Catchment","t","trim"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;;AAEA,MAAMC,cAAc,CAACC,IAAD,EAAOC,EAAP,EAAWC,WAAX,EAAwBC,OAAxB,KAAoC;AACtD,QAAMC,KAAK,0BAAiBJ,IAAjB,CAAX;AACA,QAAMK,IAAI,6BAAc,CACtB;AACEJ,MADF;AAEEC;AAFF,GADsB,EAKtB;AACED,QAAI,qBADN;AAEEC,iBAAa;AAFf,GALsB,CAAd,CAAV;AAWA,QAAMI,KAAKH,UAAU,2BAAkBA,OAAlB,CAAV,GAAuCI,QAAQC,MAA1D;AAEAJ,KAAGK,IAAH,CAAQJ,CAAR,EAAWI,IAAX,CAAgBH,EAAhB;;AACA,MAAIH,OAAJ,EAAa;AACXG,OAAGI,EAAH,CAAM,OAAN,EAAe,MAAM;AACnBC,cAAQC,GAAR,CAAY,kBAAZ,EAAgCT,OAAhC,EAAyCH,IAAzC;AACD,KAFD;AAGD;AACF,CArBD;;AAuBA,MAAMa,SAAS,OAAOb,IAAP,EAAac,GAAb,EAAkBC,OAAlB,KAA8B;AAC3CjB,MAAI,YAAJ,EAAkBE,IAAlB;AACA,QAAMgB,KAAK,0BAAiBhB,IAAjB,CAAX;AACA,QAAMI,KAAK,IAAIa,YAAJ,EAAX;AACAD,KAAGP,IAAH,CAAQL,EAAR;;AACA,MAAIW,OAAJ,EAAa;AACX,UAAM;AAAEG;AAAF,QAAc,IAAIC,kBAAJ,CAAc;AAAEf;AAAF,KAAd,CAApB;AACA,UAAMgB,IAAI,MAAMF,OAAhB;AACAnB,gBAAYC,IAAZ,EAAkB,WAAlB,EAA+BoB,EAAEC,IAAF,EAA/B,EAAyCP,GAAzC;AACD,GAJD,MAIO;AACLV,OAAGK,IAAH,CAAQF,QAAQC,MAAhB;AACD;AACF,CAZD;;eAceK,M","sourcesContent":["import Toc from '../lib/Toc'\nimport { debuglog } from 'util'\nimport Catchment from 'catchment'\nimport { replaceStream } from 'restream'\nimport { createWriteStream, createReadStream } from 'fs'\n\nconst LOG = debuglog('doc')\n\nconst replaceFile = (path, re, replacement, outfile) => {\n  const rs = createReadStream(path)\n  const s = replaceStream([\n    {\n      re,\n      replacement,\n    },\n    {\n      re: /<!--[\\s\\S]*?-->\\n+/g,\n      replacement: '',\n    },\n  ])\n\n  const ws = outfile ? createWriteStream(outfile) : process.stdout\n\n  rs.pipe(s).pipe(ws)\n  if (outfile) {\n    ws.on('close', () => {\n      console.log('Saved %s from %s', outfile, path)\n    })\n  }\n}\n\nconst runToc = async (path, out, replace) => {\n  LOG('reading %s', path)\n  const md = createReadStream(path)\n  const rs = new Toc()\n  md.pipe(rs)\n  if (replace) {\n    const { promise } = new Catchment({ rs })\n    const t = await promise\n    replaceFile(path, /^%TOC%$/gm, t.trim(), out)\n  } else {\n    rs.pipe(process.stdout)\n  }\n}\n\nexport default runToc\n"],"file":"toc.js"}