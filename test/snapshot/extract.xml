<types>
  <t name="Test" desc="This is test description." />
  <t name="SessionConfig" desc="Description of Session Config.">
    <p string name="key">cookie key.</p>
    <p opt type="number|'session'" name="maxAge" default="86400000">maxAge in ms. Default is 1 day. `session` will result in a cookie that expires when session/browser is closed. Warning: If a session cookie is stolen, this cookie will never expire.</p>
    <p opt boolean name="overwrite" default="true">Can overwrite or not.</p>
    <p opt boolean name="httpOnly" default="true">httpOnly or not or not.</p>
    <p opt boolean name="signed" default="false">Signed or not.</p>
    <p opt boolean name="rolling" default="false">Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown.</p>
    <p opt boolean name="renew" default="false">Renew session when session is nearly expired, so we can always keep user logged in.</p>
  </t>
  <t name="Limits">
    <p opt number name="fieldNameSize">Max field name size (Default: 100 bytes).</p>
    <p opt number name="fieldSize">Max field value size (Default: 1MB).</p>
    <p opt number name="fields">Max number of non- file fields (Default: Infinity).</p>
    <p opt number name="fileSize">For multipart forms, the max file size (in bytes)(Default: Infinity).</p>
    <p opt number name="files">For multipart forms, the max number of file fields (Default: Infinity).</p>
    <p opt number name="parts">For multipart forms, the max number of parts (fields + files)(Default: Infinity).</p>
    <p opt number name="headerPairs">For multipart forms, the max number of header key=> value pairs to parse Default: 2000 (same as node's http).</p>
  </t>
  <t name="StorageEngine" type="import('koa-multer').StorageEngine" />
  <t name="IncomingMessage" type="import('http').IncomingMessage" />
  <t name="File" type="import('koa-multer').File" />
  <t name="MulterConfig">
    <p opt string name="dest">Where to store the files.</p>
    <p opt type="StorageEngine" name="storage">Where to store the files.</p>
    <p opt type="(req: IncomingMessage, file: File, callback: (error: Error | null, acceptFile: boolean)) => void" name="fileFilter">Function to control which files are accepted.</p>
    <p opt type="Limits" name="limits">Limits of the uploaded data.</p>
    <p opt boolean name="preservePath" default="false"> Keep the full path of files instead of just the base name.</p>
  </t>
</types>